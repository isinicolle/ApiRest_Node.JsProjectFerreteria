
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.10.0
 * Query Engine version: 73e60b76d394f8d37d8ebd1f8918c79029f0db86
 */
Prisma.prismaVersion = {
  client: "3.10.0",
  engine: "73e60b76d394f8d37d8ebd1f8918c79029f0db86"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CategoriasScalarFieldEnum = makeEnum({
  id_categoria: 'id_categoria',
  descripcion_categoria: 'descripcion_categoria',
  estado: 'estado'
});

exports.Prisma.CiudadesScalarFieldEnum = makeEnum({
  id_ciudad: 'id_ciudad',
  nombre_ciudad: 'nombre_ciudad',
  codigoPostal: 'codigoPostal',
  id_departamento: 'id_departamento'
});

exports.Prisma.ClientesScalarFieldEnum = makeEnum({
  id_cliente: 'id_cliente',
  nom_cliente: 'nom_cliente',
  apellido_cliente: 'apellido_cliente',
  RTN: 'RTN',
  direccion_cliente: 'direccion_cliente',
  id_ciudad: 'id_ciudad',
  tel_cliente: 'tel_cliente',
  estado: 'estado',
  DNI_Cliente: 'DNI_Cliente'
});

exports.Prisma.ComprasScalarFieldEnum = makeEnum({
  id_compra: 'id_compra',
  fecha_compra: 'fecha_compra',
  id_prov: 'id_prov',
  id_empleado: 'id_empleado',
  isv: 'isv',
  descuento: 'descuento'
});

exports.Prisma.DepartamentosScalarFieldEnum = makeEnum({
  id_departamento: 'id_departamento',
  nombreDepartamento: 'nombreDepartamento'
});

exports.Prisma.DetalleComprasScalarFieldEnum = makeEnum({
  id_detalleCompra: 'id_detalleCompra',
  id_producto: 'id_producto',
  id_compra: 'id_compra',
  precio: 'precio',
  cantidad: 'cantidad'
});

exports.Prisma.DetallesVentasScalarFieldEnum = makeEnum({
  id_detalleVenta: 'id_detalleVenta',
  id_producto: 'id_producto',
  id_venta: 'id_venta',
  precio: 'precio',
  cantidad: 'cantidad'
});

exports.Prisma.DireccionesEnvioScalarFieldEnum = makeEnum({
  id_direccionEnvio: 'id_direccionEnvio',
  direccion: 'direccion',
  id_ciudad: 'id_ciudad',
  id_usuarioCliente: 'id_usuarioCliente',
  direccion_opcional: 'direccion_opcional'
});

exports.Prisma.EmpleadosScalarFieldEnum = makeEnum({
  id_empleado: 'id_empleado',
  nom_empleado: 'nom_empleado',
  apellido_empleado: 'apellido_empleado',
  telefono_empleado: 'telefono_empleado',
  direccion_empleado: 'direccion_empleado',
  id_ciudad: 'id_ciudad',
  id_rol: 'id_rol',
  fnacimiento_empleado: 'fnacimiento_empleado',
  Estado: 'Estado'
});

exports.Prisma.EmpresasEnvioScalarFieldEnum = makeEnum({
  id_empresaEnvio: 'id_empresaEnvio',
  nombre_empresa: 'nombre_empresa',
  direccion_empresa: 'direccion_empresa',
  telefono_empresa: 'telefono_empresa',
  id_ciudad: 'id_ciudad',
  estado: 'estado',
  correo_empresa: 'correo_empresa'
});

exports.Prisma.EnviosScalarFieldEnum = makeEnum({
  id_envio: 'id_envio',
  num_rastreo: 'num_rastreo',
  id_venta: 'id_venta',
  id_empresaEnvio: 'id_empresaEnvio'
});

exports.Prisma.MarcasScalarFieldEnum = makeEnum({
  id_marca: 'id_marca',
  descripcion_marca: 'descripcion_marca',
  estado: 'estado'
});

exports.Prisma.ProductosScalarFieldEnum = makeEnum({
  id_producto: 'id_producto',
  descripcion_producto: 'descripcion_producto',
  id_marca: 'id_marca',
  id_categoria: 'id_categoria',
  id_proveedor: 'id_proveedor',
  cantidad_por_unidad: 'cantidad_por_unidad',
  costo_producto: 'costo_producto',
  precio_actual: 'precio_actual',
  stock: 'stock',
  descuento: 'descuento',
  estado: 'estado',
  imagen: 'imagen'
});

exports.Prisma.ProveedoresScalarFieldEnum = makeEnum({
  id_prov: 'id_prov',
  nom_prov: 'nom_prov',
  telefono_prov: 'telefono_prov',
  correo_prov: 'correo_prov',
  direccion_prov: 'direccion_prov',
  id_ciudad: 'id_ciudad',
  Estado: 'Estado'
});

exports.Prisma.RolesEmpleadosScalarFieldEnum = makeEnum({
  id_rol: 'id_rol',
  descripcion: 'descripcion'
});

exports.Prisma.SysdiagramsScalarFieldEnum = makeEnum({
  name: 'name',
  principal_id: 'principal_id',
  diagram_id: 'diagram_id',
  version: 'version',
  definition: 'definition'
});

exports.Prisma.UsuarioEmpleadosScalarFieldEnum = makeEnum({
  id_usuarioEmpleado: 'id_usuarioEmpleado',
  nom_usuarioEmpleado: 'nom_usuarioEmpleado',
  estado: 'estado',
  contrasenia_empleado: 'contrasenia_empleado',
  correo_empleado: 'correo_empleado',
  id_empleado: 'id_empleado'
});

exports.Prisma.UsuariosClientesScalarFieldEnum = makeEnum({
  id_usuarioCliente: 'id_usuarioCliente',
  nombre_usuario: 'nombre_usuario',
  contraenia_usuario: 'contraenia_usuario',
  id_cliente: 'id_cliente',
  correo_usuario: 'correo_usuario',
  estado: 'estado'
});

exports.Prisma.VentaScalarFieldEnum = makeEnum({
  id_Venta: 'id_Venta',
  fecha: 'fecha',
  id_cliente: 'id_cliente',
  RTN_estado: 'RTN_estado',
  ISV: 'ISV',
  id_direccionEnvio: 'id_direccionEnvio',
  descuento: 'descuento'
});

exports.Prisma.CarritoScalarFieldEnum = makeEnum({
  id_carrito: 'id_carrito',
  id_usuarioCliente: 'id_usuarioCliente'
});

exports.Prisma.CarritoItemScalarFieldEnum = makeEnum({
  id_itemCarrito: 'id_itemCarrito',
  id_Carrito: 'id_Carrito',
  id_producto: 'id_producto',
  cantidad: 'cantidad'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Categorias: 'Categorias',
  Ciudades: 'Ciudades',
  Clientes: 'Clientes',
  Compras: 'Compras',
  Departamentos: 'Departamentos',
  DetalleCompras: 'DetalleCompras',
  DetallesVentas: 'DetallesVentas',
  DireccionesEnvio: 'DireccionesEnvio',
  Empleados: 'Empleados',
  EmpresasEnvio: 'EmpresasEnvio',
  Envios: 'Envios',
  Marcas: 'Marcas',
  Productos: 'Productos',
  Proveedores: 'Proveedores',
  RolesEmpleados: 'RolesEmpleados',
  sysdiagrams: 'sysdiagrams',
  UsuarioEmpleados: 'UsuarioEmpleados',
  usuariosClientes: 'usuariosClientes',
  Venta: 'Venta',
  Carrito: 'Carrito',
  CarritoItem: 'CarritoItem'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
